name: MERN CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Step 1: Backend Build and Test
  backend-build-test:
    name: Build and Test Backend
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Install backend dependencies
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: |
          npm install

      # Run backend tests
      - name: Run Backend Tests
        working-directory: ./backend
        run: |
          npm test

  # Step 2: Frontend Build and Test
  frontend-build-test:
    name: Build and Test Frontend
    runs-on: ubuntu-latest
    needs: backend-build-test

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Install frontend dependencies
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: |
          npm install

      # Run frontend build
      - name: Build Frontend
        working-directory: ./frontend
        run: |
          npm run build

      # Run frontend tests
      - name: Run Frontend Tests
        working-directory: ./frontend
        run: |
          npm test

  # Step 3: Deploy to Server
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: frontend-build-test

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up SSH
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      # Deploy the application
      - name: Deploy Application
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} << 'EOF'
          # Navigate to the project directory
          cd /path/to/project

          # Pull latest changes
          git pull origin main

          # Install backend dependencies
          cd backend
          npm install

          # Restart the backend server
          pm2 restart backend

          # Build and deploy frontend
          cd ../frontend
          npm install
          npm run build

          # Serve the React frontend (example using nginx)
          cp -R build/* /var/www/html/
          EOF
